import comp from "D:/Project/Blog/my-blog_newtheme/src/.vuepress/.temp/pages/程序设计语言/java/IO.html.vue"
const data = JSON.parse("{\"path\":\"/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/java/IO.html\",\"title\":\"Java I/O\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"pen-to-square\",\"date\":\"2022-01-01T00:00:00.000Z\",\"order\":2,\"category\":[\"Java\"],\"tag\":[\"基础\"],\"description\":\"Java I/O Java 的 I/O（输入/输出）主要用于处理文件、网络、控制台输入输出等操作，核心是 java.io 和 java.nio（非阻塞IO 适用于高并发场景） 两个包。以下结合常见的实用场景，详细讲解 Java IO 的。 1. 文件操作：读取和写入文件 Java IO 中最常见的操作是文件的读取和写入，这里使用字符流，一次读取/写入一...\",\"head\":[[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Java I/O\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-01T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Goat_Yang\\\",\\\"url\\\":\\\"https://mister-hope.com\\\"}]}\"],[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/Yang-goat/MyBlog/MyBlog/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/java/IO.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Goat_Yang\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java I/O\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Java I/O Java 的 I/O（输入/输出）主要用于处理文件、网络、控制台输入输出等操作，核心是 java.io 和 java.nio（非阻塞IO 适用于高并发场景） 两个包。以下结合常见的实用场景，详细讲解 Java IO 的。 1. 文件操作：读取和写入文件 Java IO 中最常见的操作是文件的读取和写入，这里使用字符流，一次读取/写入一...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"基础\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-01T00:00:00.000Z\"}]]},\"readingTime\":{\"minutes\":5.27,\"words\":1580},\"filePathRelative\":\"程序设计语言/java/IO.md\",\"excerpt\":\"\\n<p>Java 的 I/O（输入/输出）主要用于处理文件、网络、控制台输入输出等操作，核心是 <code>java.io</code> 和 <code>java.nio</code>（非阻塞IO 适用于高并发场景） 两个包。以下结合常见的实用场景，详细讲解 Java IO 的。</p>\\n<h2>1. <strong>文件操作：读取和写入文件</strong></h2>\\n<p>Java IO 中最常见的操作是文件的读取和写入，这里使用字符流，一次读取/写入一个字符。</p>\\n<h3><strong>读取文件：</strong></h3>\\n<div class=\\\"language-java line-numbers-mode\\\" data-highlighter=\\\"shiki\\\" data-ext=\\\"java\\\" style=\\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\\"><pre class=\\\"shiki shiki-themes one-light one-dark-pro vp-code\\\"><code class=\\\"language-java\\\"><span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">import</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> java.io.</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\">*</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> class</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> FileReadExample</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> static</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> void</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> main</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">String</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">[] </span><span style=\\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\\">args</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">)</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">        // 文件路径</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">        String</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> filePath</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\"> =</span><span style=\\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\\"> \\\"example.txt\\\"</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">        try</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> (</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">BufferedReader</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> reader</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\"> =</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> new</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> BufferedReader</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">new</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> FileReader</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(filePath))) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">            String</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> line</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">            while</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> ((line </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">=</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\"> reader</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">.</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\">readLine</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">()) </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">!=</span><span style=\\\"--shiki-light:#986801;--shiki-dark:#D19A66\\\"> null</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\">                System</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">.</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\">out</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">.</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\">println</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(line); </span><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">// 输出文件内容</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">        } </span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">catch</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> (</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">IOException</span><span style=\\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\\"> e</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\">            e</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">.</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\">printStackTrace</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(); </span><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">// 处理异常</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">}</span></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
